// <auto-generated />
using System;
using BankTronSQLiteData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BankTronSQLiteData.Migrations
{
    [DbContext(typeof(BankTronContext))]
    partial class BankTronContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22");

            modelBuilder.Entity("BankTronSQLiteData.Budget", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Budgets");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Default",
                            Value = 1000.00m
                        });
                });

            modelBuilder.Entity("BankTronSQLiteData.BudgetGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BudgetID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double?>("WeightInBudget")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("BudgetID");

                    b.ToTable("BudgetGroups");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            BudgetID = 1,
                            Name = "Fixed Costs",
                            WeightInBudget = 0.5
                        },
                        new
                        {
                            ID = 2,
                            BudgetID = 1,
                            Name = "Investments",
                            WeightInBudget = 0.20000000000000001
                        },
                        new
                        {
                            ID = 3,
                            BudgetID = 1,
                            Name = "Savings",
                            WeightInBudget = 0.20000000000000001
                        },
                        new
                        {
                            ID = 4,
                            BudgetID = 1,
                            Name = "Guilt Free",
                            WeightInBudget = 0.10000000000000001
                        });
                });

            modelBuilder.Entity("BankTronSQLiteData.BudgetItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BudgetGroupID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("WeightInGroup")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("BudgetGroupID");

                    b.HasIndex("CategoryID");

                    b.ToTable("BudgetItems");
                });

            modelBuilder.Entity("BankTronSQLiteData.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Rent"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Bills"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Vehicle"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Public Transport"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Health"
                        },
                        new
                        {
                            ID = 6,
                            Name = "RRSP"
                        },
                        new
                        {
                            ID = 7,
                            Name = "TSFA"
                        },
                        new
                        {
                            ID = 8,
                            Name = "Travel"
                        },
                        new
                        {
                            ID = 9,
                            Name = "Morgage Downpayment"
                        },
                        new
                        {
                            ID = 10,
                            Name = "New Car"
                        },
                        new
                        {
                            ID = 11,
                            Name = "Climbing Gym"
                        },
                        new
                        {
                            ID = 12,
                            Name = "Volleyball"
                        },
                        new
                        {
                            ID = 13,
                            Name = "Social"
                        },
                        new
                        {
                            ID = 14,
                            Name = "Splurge"
                        });
                });

            modelBuilder.Entity("BankTronSQLiteData.CategoryDescription", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("CategoryDescriptions");
                });

            modelBuilder.Entity("BankTronSQLiteData.Transaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountType")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Bank")
                        .HasColumnType("TEXT");

                    b.Property<int>("CategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BankTronSQLiteData.BudgetGroup", b =>
                {
                    b.HasOne("BankTronSQLiteData.Budget", "Budget")
                        .WithMany("BudgetGroups")
                        .HasForeignKey("BudgetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankTronSQLiteData.BudgetItem", b =>
                {
                    b.HasOne("BankTronSQLiteData.BudgetGroup", "BudgetGroup")
                        .WithMany("BudgetItems")
                        .HasForeignKey("BudgetGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankTronSQLiteData.Category", "Category")
                        .WithMany("BudgetItems")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankTronSQLiteData.CategoryDescription", b =>
                {
                    b.HasOne("BankTronSQLiteData.Category", "Category")
                        .WithMany("CategoryDescriptions")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankTronSQLiteData.Transaction", b =>
                {
                    b.HasOne("BankTronSQLiteData.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
